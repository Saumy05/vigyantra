import os
import hashlib
import re
from typing import Dict, List, Any

class MalwareScanner:
    def __init__(self):
        # Known malicious patterns and signatures
        self.suspicious_patterns = [
            rb'cmd\.exe',
            rb'powershell',
            rb'eval\(',
            rb'<script',
            rb'javascript:',
            rb'vbscript:',
            rb'file:///',
            rb'\\\\[^\\s]+\\',  # UNC paths
        ]
        
        # Suspicious metadata patterns
        self.suspicious_metadata = [
            'malware',
            'virus',
            'trojan',
            'backdoor',
            'exploit'
        ]
    
    def scan(self, file_path: str, parsed_content: Dict[str, Any]) -> Dict[str, Any]:
        """Scan file for malware and suspicious content"""
        vulnerabilities = []
        
        # Scan file binary content
        binary_issues = self._scan_binary(file_path)
        vulnerabilities.extend(binary_issues)
        
        # Scan metadata
        metadata_issues = self._scan_metadata(parsed_content.get('metadata', {}))
        vulnerabilities.extend(metadata_issues)
        
        # Scan extracted text
        text_issues = self._scan_text_content(parsed_content.get('text', ''))
        vulnerabilities.extend(text_issues)
        
        return {
            'vulnerabilities': vulnerabilities,
            'scan_summary': {
                'total_issues': len(vulnerabilities),
                'high_severity': len([v for v in vulnerabilities if v['severity'] == 'high']),
                'medium_severity': len([v for v in vulnerabilities if v['severity'] == 'medium']),
                'low_severity': len([v for v in vulnerabilities if v['severity'] == 'low'])
            }
        }
    
    def _scan_binary(self, file_path: str) -> List[Dict[str, Any]]:
        """Scan binary file content for suspicious patterns"""
        issues = []
        
        try:
            with open(file_path, 'rb') as f:
                content = f.read()
                
                for pattern in self.suspicious_patterns:
                    if re.search(pattern, content, re.IGNORECASE):
                        issues.append({
                            'type': 'Suspicious Binary Pattern',
                            'severity': 'high',
                            'description': f'Suspicious pattern detected in file binary: {pattern.decode("utf-8", errors="ignore")}',
                            'recommendation': 'File may contain embedded malicious code. Verify source and scan with antivirus.'
                        })
                
                # Check for embedded files (basic heuristic)
                if b'PK\x03\x04' in content:  # ZIP signature
                    issues.append({
                        'type': 'Embedded Archive',
                        'severity': 'medium',
                        'description': 'File contains embedded ZIP archive which could hide malicious content',
                        'recommendation': 'Extract and scan embedded archive contents separately.'
                    })
                    
        except Exception as e:
            issues.append({
                'type': 'Scan Error',
                'severity': 'low',
                'description': f'Could not complete binary scan: {str(e)}',
                'recommendation': 'Manual verification recommended.'
            })
            
        return issues
    
    def _scan_metadata(self, metadata: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Scan file metadata for suspicious content"""
        issues = []
        
        for key, value in metadata.items():
            if isinstance(value, str):
                for suspicious_term in self.suspicious_metadata:
                    if suspicious_term.lower() in value.lower():
                        issues.append({
                            'type': 'Suspicious Metadata',
                            'severity': 'medium',
                            'description': f'Suspicious term "{suspicious_term}" found in metadata field "{key}"',
                            'recommendation': 'Verify file authenticity and source.'
                        })
        
        return issues
    
    def _scan_text_content(self, text: str) -> List[Dict[str, Any]]:
        """Scan extracted text for suspicious content"""
        issues = []
        
        # Check for script injection attempts
        script_patterns = [
            r'<script[^>]*>.*?</script>',
            r'javascript:',
            r'vbscript:',
            r'data:text/html',
            r'eval\s*\(',
            r'document\.write\s*\(',
        ]
        
        for pattern in script_patterns:
            if re.search(pattern, text, re.IGNORECASE | re.DOTALL):
                issues.append({
                    'type': 'Script Injection',
                    'severity': 'high',
                    'description': f'Potential script injection detected: {pattern}',
                    'recommendation': 'Remove or sanitize suspicious script content.'
                })
        
        # Check for command injection attempts
        command_patterns = [
            r'cmd\.exe',
            r'powershell',
            r'bash\s+-c',
            r'sh\s+-c',
            r'system\s*\(',
            r'exec\s*\(',
        ]
        
        for pattern in command_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                issues.append({
                    'type': 'Command Injection',
                    'severity': 'high',
                    'description': f'Potential command injection detected: {pattern}',
                    'recommendation': 'Remove suspicious command references.'
                })
        
        return issues
